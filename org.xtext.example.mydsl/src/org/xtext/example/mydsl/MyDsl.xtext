grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
//import "http://www.eclipse.org/xtext/xbase/Xtype" as xtypes

//generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"
generate myDsl "http://www.citynix.com/ns/drosera"

Domainmodel:
//	moduleName=ModuleDeclaration
	"package" name=QualifiedName ";" //
	importSection=XImportSection? //
	suite=SuiteDeclaration;

SuiteDeclaration:
	'suite' name=ValidID ('using' '(' configFiles=Files ')')? '{' //
	beforeSuite=InitBody prepare=PrepareDeclaraion //
	afterActions+=(Action)* '}';

PrepareDeclaraion:
	'prepare' ('using' '(' configFiles=Files ')')? '{' //
	before=InitBody //
	testCases+=TestDefinition+ //
	afterActions+=Action* '}';

InitBody returns xbase::XBlockExpression:
	{InitBody} //
	expressions+=EventHandler* //
	expressions+=Action*;

TestDefinition:
	"test" name=ValidID ('using' '(' configFiles=Files ')')? '{' body=TestBody '}';

EventHandler returns xbase::XExpression:
	{EventHandler} "On" type=JvmTypeReference conj=ConjunctionExpression "=>" handler=Action ";";

	//ActionExpression returns xbase::XExpression:
//	{ActionExpression} type=JvmTypeReference args=ActionConfiguration ";";

//Validation returns xbase::XExpression:
//	{Validation} type=JvmTypeReference args=Arguments ";";

TestBody returns xbase::XBlockExpression:
	{TestBody} //
	expressions+=Action+;

Action returns xbase::XExpression:
	{Action} type=JvmTypeReference args=Arguments ";";
 
Arguments:
	{Arguments} targets+=(UIElement)* (":" data+=Datum+)?;

UIElement returns xbase::XExpression:
	XExpression;

Datum returns xbase::XExpression:
//	{xbase::XExpression}
//	value=
	(XLiteral | PropRef);

PropRef returns xbase::XExpression:
	{PropRef} ns=NS ":" prop=QualifiedName;

ConjunctionExpression returns xbase::XExpression:
	{ConjunctionExpression} pos=("after" | "before");

	//Value :
//	{Value} Xbase::XNumberLiteral | Xbase::XStringLiteral;
NS:
	ID;

/*A list of comma separated files ending with xml, properties) */
Files:
	files+=ConfigFile ("," files+=ConfigFile)*;

ConfigFile:
	file=FileName;

FileName:
	(ID | INT) "." ("xml" | "properties");
	//	('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* "." ("xml" | "properties" | "data");
  